package cmd

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/spf13/cobra"
	"github.com/yaoapp/kun/exception"
	"github.com/yaoapp/yao/cmd/studio"
	"github.com/yaoapp/yao/cmd/sui"
	"github.com/yaoapp/yao/config"
	"github.com/yaoapp/yao/pack"
	"github.com/yaoapp/yao/share"
)

var appPath string
var yazFile string
var licenseKey string

var lang = os.Getenv("YAO_LANG")
var langs = map[string]string{
	"Start Engine":                          "ÂêØÂä® YAO Â∫îÁî®ÂºïÊìé",
	"Get an application":                    "‰∏ãËΩΩÂ∫îÁî®Ê∫êÁ†Å",
	"One or more arguments are not correct": "ÂèÇÊï∞ÈîôËØØ",
	"Application directory":                 "ÊåáÂÆöÂ∫îÁî®Ë∑ØÂæÑ",
	"Environment file":                      "ÊåáÂÆöÁéØÂ¢ÉÂèòÈáèÊñá‰ª∂",
	"Help for yao":                          "ÊòæÁ§∫ÂëΩ‰ª§Â∏ÆÂä©ÊñáÊ°£",
	"Show app configure":                    "ÊòæÁ§∫Â∫îÁî®ÈÖçÁΩÆ‰ø°ÊÅØ",
	"Update database schema":                "Êõ¥Êñ∞Êï∞ÊçÆË°®ÁªìÊûÑ",
	"Execute process":                       "ËøêË°åÂ§ÑÁêÜÂô®",
	"Show version":                          "ÊòæÁ§∫ÂΩìÂâçÁâàÊú¨Âè∑",
	"Development mode":                      "‰ΩøÁî®ÂºÄÂèëÊ®°ÂºèÂêØÂä®",
	"Enabled unstable features":             "ÂêØÁî®ÂÜÖÊµãÂäüËÉΩ",
	"Fatal: %s":                             "Â§±Ë¥•: %s",
	"Service stopped":                       "ÊúçÂä°Â∑≤ÂÖ≥Èó≠",
	"API":                                   " APIÊé•Âè£",
	"API List":                              "APIÂàóË°®",
	"Root":                                  "Â∫îÁî®ÁõÆÂΩï",
	"Data":                                  "Êï∞ÊçÆÁõÆÂΩï",
	"Frontend":                              "ÂâçÂè∞Âú∞ÂùÄ",
	"Dashboard":                             "ÁÆ°ÁêÜÂêéÂè∞",
	"Not enough arguments":                  "ÂèÇÊï∞ÈîôËØØ: Áº∫Â∞ëÂèÇÊï∞",
	"Run: %s":                               "ËøêË°å: %s",
	"Arguments: %s":                         "ÂèÇÊï∞ÈîôËØØ: %s",
	"%s Response":                           "%s ËøîÂõûÁªìÊûú",
	"Update schema model: %s (%s) ":         "Êõ¥Êñ∞Ë°®ÁªìÊûÑ model: %s (%s)",
	"Model name":                            "Ê®°ÂûãÂêçÁß∞",
	"Initialize project":                    "È°πÁõÆÂàùÂßãÂåñ",
	"‚ú®DONE‚ú®":                                "‚ú®ÂÆåÊàê‚ú®",
	"NEXT:":                                 "‰∏ã‰∏ÄÊ≠•:",
	"Listening":                             "    ÁõëÂê¨",
	"‚ú®LISTENING‚ú®":                           "‚ú®ÊúçÂä°Ê≠£Âú®ËøêË°å‚ú®",
	"‚ú®STOPPED‚ú®":                             "‚ú®ÊúçÂä°Â∑≤ÂÅúÊ≠¢‚ú®",
	"SessionPort":                           "‰ºöËØùÊúçÂä°Á´ØÂè£",
	"Force migrate":                         "Âº∫Âà∂Êõ¥Êñ∞Êï∞ÊçÆË°®ÁªìÊûÑ",
	"Migrate is not allowed on production mode.": "Migrate ‰∏çËÉΩÂÜçÁîü‰∫ßÁéØÂ¢É‰∏ã‰ΩøÁî®",
	"Upgrade yao to latest version":              "ÂçáÁ∫ß yao Âà∞ÊúÄÊñ∞ÁâàÊú¨",
	"üéâCurrent version is the latestüéâ":            "üéâÂΩìÂâçÁâàÊú¨ÊòØÊúÄÊñ∞ÁöÑüéâ",
	"Do you want to update to %s ? (y/n): ":      "ÊòØÂê¶Êõ¥Êñ∞Âà∞ %s ? (y/n): ",
	"Invalid input":                              "ËæìÂÖ•ÈîôËØØ",
	"Canceled upgrade":                           "Â∑≤ÂèñÊ∂àÊõ¥Êñ∞",
	"Error occurred while updating binary: %s":   "Êõ¥Êñ∞‰∫åËøõÂà∂Êñá‰ª∂Êó∂Âá∫Èîô: %s",
	"üéâSuccessfully updated to version: %süéâ":      "üéâÊàêÂäüÊõ¥Êñ∞Âà∞ÁâàÊú¨: %süéâ",
	"Print all version information":              "ÊòæÁ§∫ËØ¶ÁªÜÁâàÊú¨‰ø°ÊÅØ",
	"SUI Template Engine":                        "SUI Ê®°ÊùøÂºïÊìéÂëΩ‰ª§",
}

// L Â§öËØ≠Ë®ÄÂàáÊç¢
func L(words string) string {
	if lang == "" {
		return words
	}

	if trans, has := langs[words]; has {
		return trans
	}
	return words
}

var rootCmd = &cobra.Command{
	Use:   share.BUILDNAME,
	Short: "Yao App Engine",
	Long:  `Yao App Engine`,
	Args:  cobra.MinimumNArgs(1),
	CompletionOptions: cobra.CompletionOptions{
		DisableDefaultCmd: true,
	},
	Run: func(cmd *cobra.Command, args []string) {
		if len(args) > 0 {
			switch args[0] {
			case "fuxi":
				fuxi()
			}
		}
		fmt.Fprintln(os.Stderr, L("One or more arguments are not correct"), args)
		os.Exit(1)
	},
}

var studioCmd = &cobra.Command{
	Use:   "studio",
	Short: "Yao Studio CLI",
	Long:  `Yao Studio CLI`,
	Args:  cobra.MinimumNArgs(1),
	CompletionOptions: cobra.CompletionOptions{
		DisableDefaultCmd: true,
	},
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Fprintln(os.Stderr, L("One or more arguments are not correct"), args)
		os.Exit(1)
	},
}

var suiCmd = &cobra.Command{
	Use:   "sui",
	Short: L("SUI Template Engine"),
	Long:  L("SUI Template Engine"),
	Args:  cobra.MinimumNArgs(1),
	CompletionOptions: cobra.CompletionOptions{
		DisableDefaultCmd: true,
	},
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Fprintln(os.Stderr, L("One or more arguments are not correct"), args)
		os.Exit(1)
	},
}

// Âä†ËΩΩÂëΩ‰ª§
func init() {

	studioCmd.AddCommand(studio.RunCmd)
	suiCmd.AddCommand(sui.WatchCmd)

	rootCmd.AddCommand(
		versionCmd,
		migrateCmd,
		inspectCmd,
		startCmd,
		runCmd,
		getCmd,
		dumpCmd,
		restoreCmd,
		// socketCmd,
		// websocketCmd,
		packCmd,
		studioCmd,
		suiCmd,
		upgradeCmd,
	)
	// rootCmd.SetHelpCommand(helpCmd)
	rootCmd.PersistentFlags().StringVarP(&appPath, "app", "a", "", L("Application directory"))
	rootCmd.PersistentFlags().StringVarP(&yazFile, "file", "f", "", L("Application package file"))
	rootCmd.PersistentFlags().StringVarP(&licenseKey, "key", "k", "", L("Application license key"))
}

// Execute ËøêË°åRoot
func Execute() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}

// Boot ËÆæÂÆöÈÖçÁΩÆ
func Boot() {

	root := config.Conf.Root
	if appPath != "" {
		r, err := filepath.Abs(appPath)
		if err != nil {
			exception.New("Root error %s", 500, err.Error()).Throw()
		}
		root = r
	}

	config.Conf = config.LoadFrom(filepath.Join(root, ".env"))

	if share.BUILDIN {
		os.Setenv("YAO_APP_SOURCE", "::binary")
		config.Conf.AppSource = "::binary"
	}

	if yazFile != "" {
		os.Setenv("YAO_APP_SOURCE", yazFile)
		config.Conf.AppSource = yazFile
	}

	if config.Conf.Mode == "production" {
		config.Production()
	} else if config.Conf.Mode == "development" {
		config.Development()
	}

	// set license
	if licenseKey != "" {
		pack.SetCipher(licenseKey)
	}
}
